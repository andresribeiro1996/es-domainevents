<?php

namespace App\house;

use App\house\application\EventForwardingService;
use App\house\domain\DomainEvent;
use App\house\domain\PublishedGlobalEvent;
use App\house\infrastructure\message\DomainEventConsumerInKafka;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class DomainEventPublisher extends EventDispatcher
{
    /**
     * @var ?DomainEventPublisher
     */
    private static $instance = null;

    public static function instance(): self
    {
        if (self::$instance == null)
        {
            self::$instance = new DomainEventPublisher();
            self::$instance->addSubscriber(new EventForwardingService(new DomainEventConsumerInKafka()));
        }

        return self::$instance;
    }

    /**
     * @param DomainEvent[] $eventStream
     */
    public function publish(array $eventStream): void {

        foreach ($eventStream as $domainEvent) {
            $this->dispatch($domainEvent, $domainEvent->getName());

            if($domainEvent->isGlobalEvent()) {
                $globalEvent = new PublishedGlobalEvent($domainEvent);
                $this->dispatch($globalEvent, $globalEvent->getName());
            }
        }
    }

    public function addSubscriber(EventSubscriberInterface $subscriber)
    {
        parent::addSubscriber($subscriber); // TODO: Change the autogenerated stub
    }
}

