[{"C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\index.js":"1","C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\App.js":"2","C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\reportWebVitals.js":"3","C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\Main.js":"4","C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\EventLog.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":238,"mtime":1611356863085,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":2428,"mtime":1611278694451,"results":"10","hashOfConfig":"7"},{"size":787,"mtime":1611278922405,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"oco178",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\index.js",[],["25","26"],"C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\App.js",["27"],"C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\reportWebVitals.js",[],"C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\Main.js",["28"],"import {Component} from \"react/cjs/react.production.min\";\r\nimport EventLog from \"./EventLog\";\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ws: null\r\n        };\r\n    }\r\n\r\n    // single websocket instance for the own application and constantly trying to reconnect.\r\n\r\n    componentDidMount() {\r\n        this.connect();\r\n    }\r\n\r\n    timeout = 250; // Initial timeout duration as a class variable\r\n\r\n    /**\r\n     * @function connect\r\n     * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\r\n     */\r\n    connect = () => {\r\n        var ws = new WebSocket(\"ws://localhost:8083\");\r\n        let that = this; // cache the this\r\n        var connectInterval;\r\n\r\n        // websocket onopen event listener\r\n        ws.onopen = () => {\r\n            console.log(\"connected websocket main component\");\r\n\r\n            this.setState({ ws: ws });\r\n\r\n            that.timeout = 250; // reset timer to 250 on open of websocket connection\r\n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\r\n        };\r\n\r\n        // websocket onclose event listener\r\n        ws.onclose = e => {\r\n            console.log(\r\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\r\n                    10000 / 1000,\r\n                    (that.timeout + that.timeout) / 1000\r\n                )} second.`,\r\n                e.reason\r\n            );\r\n\r\n            that.timeout = that.timeout + that.timeout; //increment retry interval\r\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\r\n        };\r\n\r\n        // websocket onerror event listener\r\n        ws.onerror = err => {\r\n            console.error(\r\n                \"Socket encountered error: \",\r\n                err.message,\r\n                \"Closing socket\"\r\n            );\r\n\r\n            ws.close();\r\n        };\r\n    };\r\n\r\n    /**\r\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\r\n     */\r\n    check = () => {\r\n        const { ws } = this.state;\r\n        if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\r\n    };\r\n\r\n    render() {\r\n        return (<EventLog/>);\r\n    }\r\n}","C:\\Users\\andre\\Documents\\Projects\\domain-events\\world\\src\\EventLog.js",["29"],"import {Component} from \"react/cjs/react.production.min\";\r\nimport './EventLog.css';\r\nexport default class EventLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // single websocket instance for the own application and constantly trying to reconnect.\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<div className=\"card text-white bg-dark mb-3\" style={{width: \"250px\", height: \"400px\"}}>\r\n            <div className=\"card-header\">Console</div>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">Feed</h5>\r\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n            </div>\r\n        </div>)\r\n    }\r\n}",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":8,"nodeType":"36","messageId":"37","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"39","line":71,"column":34,"nodeType":"40","messageId":"41","endLine":71,"endColumn":36},{"ruleId":"42","severity":1,"message":"43","line":4,"column":5,"nodeType":"44","messageId":"45","endLine":6,"endColumn":6},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]