<?php


namespace App;


use App\house\persistence\inMemory\DomainEventConsumerInMemory as HouseDomainEventConsumer;
use App\robber\persistence\inMemory\DomainEventConsumerInMemory as RobberDomainEventConsumer;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Contracts\EventDispatcher\Event;

class EventBusInMemoryDispatcher extends EventDispatcher
{
    private static $instance = null;

    public static function instance(): EventBusInMemoryDispatcher
    {
        if (self::$instance == null) {
            self::$instance = new EventBusInMemoryDispatcher();


            self::$instance->addSubscriber(
                new HouseDomainEventConsumer(
                    EventBusInMemory::instance()
                )
            );

            self::$instance->addSubscriber(
                new RobberDomainEventConsumer(
                    EventBusInMemory::instance()
                )
            );
        }

        return self::$instance;
    }

    public function poke(): void
    {
        $this->dispatch(new Event(),'poke');
    }

    public function addSubscriber(EventSubscriberInterface $subscriber)
    {
        parent::addSubscriber($subscriber); // TODO: Change the autogenerated stub
    }
}